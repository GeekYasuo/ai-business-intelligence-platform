version: '3.8'

services:
  # Main application services
  ai-platform-app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3001:3001"
      - "8001:8001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://aiuser:aipassword@postgres:5432/ai_business_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-change-in-production}
      - ML_SERVICE_URL=http://localhost:8001
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./models:/app/models
    restart: unless-stopped
    networks:
      - ai-platform-network
    healthcheck:
      test: ["CMD", "node", "backend/dist/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database with optimizations
  postgres:
    image: postgres:15-alpine
    container_name: ai-platform-postgres
    environment:
      POSTGRES_DB: ai_business_db
      POSTGRES_USER: aiuser
      POSTGRES_PASSWORD: aipassword
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/schemas:/docker-entrypoint-initdb.d/schemas:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ai-platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aiuser -d ai_business_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ai-platform-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - ai-platform-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - REDIS_MAXMEMORY=1gb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
      - REDIS_SAVE=60 1000

  # Frontend development server (optional)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
      - REACT_APP_GRAPHQL_URL=http://localhost:3001/graphql
      - REACT_APP_WS_URL=ws://localhost:3001
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
    depends_on:
      - ai-platform-app
    restart: unless-stopped
    networks:
      - ai-platform-network

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: ai-platform-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - ai-platform-app
      - frontend-dev
    restart: unless-stopped
    networks:
      - ai-platform-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-platform-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
    restart: unless-stopped
    networks:
      - ai-platform-network

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai-platform-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - ai-platform-network
    depends_on:
      - prometheus

  # Elasticsearch for logging and search
  elasticsearch:
    image: elasticsearch:8.5.0
    container_name: ai-platform-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - ai-platform-network

  # Kibana for log visualization
  kibana:
    image: kibana:8.5.0
    container_name: ai-platform-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - ai-platform-network

  # MinIO for object storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: ai-platform-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - ai-platform-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local

# Custom network for service communication
networks:
  ai-platform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
